How to document your code
================================================

.. contents:: In this section
    :local:

This documentation is created with Sphinx. It has automatic API build, so *write good docstrings*!

Manually
--------
You can write documentation pages manually in the ``docs/sphinx/_static/`` directory using ReSt

    * `ReST primer <http://www.sphinx-doc.org/en/stable/rest.html>`_

In this documentation at the upper right corner, there is a "View page source" link that is very useful.

Bibliographic references
************************
Use inline references with the ``:cite:`auth:99``` directive.

At the end of the page, put this command to display the reference::

    .. bibliography:: /lightwave-bibliography.bib

The bibtex source is located at `doc/sphinx/lightwave-bibliography.bib`


Via the docstrings
------------------
Documentation of API is autogenerated. That means whatever you put in the code docstrings will end up formatted nicely on this site. It also means you have to follow some rules about it.

You should do functions like this::

    def foo(a, b, *args):
        ''' My cool function
            << Blank line causes a rendered line break >>
            This function does some stuff with ``a`` and ``b``:
                * one thing
                * another thing
            << Blank line after indented thing, otherwise you get Warnings >>
            Pretty neat eh?
            << Blank line before argument list, otherwise you get Warnings >>
            Args:
                a (int): an input
                b (int): another input
                \*args: more inputs

            Returns:
                (int): an output
        '''

This is called Google docstring format. It will render as follows.

.. py:function:: foo(a, b, *args)

    My cool function

    This function does some stuff with ``a`` and ``b``:
        * one thing
        * another thing

    Pretty neat eh?

    :param int a: an input
    :param int b: another input
    :param \*args: more inputs
    :returns: an output

Note, if you look at the source of this .rst file, the rendered documentation is in python format using lists of ``:param:``. You should use python docstring format if manually documenting in the doc source. In the *code*, use Google format.

Real examples can be found by browsing the API section of this documentation. If you see something you like, click on the link to view the source. Then you can see how the docstring did that.


Via IPython Notebooks
---------------------
The idea here is that it is sometimes instructive for the reader to play with some knobs to see how something works. In some cases, real code examples are also useful. In the best case, those knobs can be fully controlled, in a sense, by letting the user test out all sorts of permutations or shortcuts operating within a real kernel.

Read the docs and standard HTML don't support interactive kernels, but there is two ways to use them
    1. Directing the reader to an ipynb file that they can play with
    2. Displaying the notebook as HTML as if it has just executed

We want to keep those synchronized with some version that can be accessed by their kernel. We also would like to prevent them from changing the documentation source. It is inconvenient to execute .ipynb files every time the documentation is built.

**Most of this is handled by the** `nbsphinx <nbsphinx.readthedocs.io>`_ **package.** Basically, you can convert .ipynb files to .html files and control background execution with IPython kernels.

Conventions specific to this project
***********************************************
As of now, we have a symbolic link
When you want to use a notebook in the documentation, put it in the ``notebooks/Tests`` directory. This keeps them centralized. Get at it with a Jupyter kernel, make **sure** it runs without errors. Before putting it in the sphinx toctree, you have to create a symbolic link between the documentation and the notebooks::

    $ cd docs/sphinx/ipynbs
    $ ln -s ../../../notebooks/Tutorials/myNewTutorial.ipynb

You can then the put it in toctrees like so.

.. toctree::
    :maxdepth: 1
    :glob:
    :caption: All IPython notebooks used in this documentation

    /ipynbs/*

The notebook is executed and output stored one time after the documentation _build is cleared. Then it is only re-executed if the .ipynb file changes.

Notebooks that use hardware
***************************
Do not put them in the documentation. Period.

Documentation must be built any time from a consistent state. Hardware code must only be executed when a user knows what they are doing, not by some autobuild hook.

.. Warning::

    As far as I know, there is nothing explicitly preventing you from doing this right now. Just don't try it.

.. Note:: Hardware-like notebooks could be used in the future with the ability to mimic a known laboratory state virtually.

Seeing changes you make
-----------------------
To see your changes to the documentation, launch your own server like this::

    echo 8050 > .dochostport
    tmux new -s localDocs
    make dochost
    <Ctrl-b, d>

This can be accessed at the URL localhost:8050. When you make a change, you can just rebuild like this::

    source venv/bin/activate
    cd docs
    make html

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
