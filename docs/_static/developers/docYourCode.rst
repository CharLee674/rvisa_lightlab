How to document your code
================================================

.. contents:: In this section
    :local:

This documentation is created with Sphinx. It has automatic API build, so *write good docstrings*!

Seeing changes you make
-----------------------
To see your changes to the documentation, launch a server from your local machine like this::

    echo 8050 > .dochostport
    tmux new -s localDocs
    make dochost
    <Ctrl-b, d>

This can be accessed at the URL localhost:8050. When you make a change, you can just rebuild like this::

    source venv/bin/activate
    cd docs
    make html

Manually
--------
You can write documentation pages manually in the ``docs/sphinx/_static/`` directory using ReSt

    * `ReST primer <http://www.sphinx-doc.org/en/stable/rest.html>`_

In this documentation at the upper right corner, there is a "View page source" link that is very useful.

Bibliographic references
************************
Use inline references with the ``:cite:`auth:99``` directive.

At the end of the page, put this command to display the reference::

    .. bibliography:: /lightwave-bibliography.bib

The bibtex source is located at `doc/sphinx/lightwave-bibliography.bib`


Via the docstrings
------------------
Documentation of API is autogenerated. That means whatever you put in the code docstrings will end up formatted nicely on this site. It also means you have to follow some rules about it.

You should do functions like this::

    def foo(a, b, *args):
        ''' My cool function
            << Blank line causes a rendered line break >>
            This function does some stuff with ``a`` and ``b``:
                * one thing
                * another thing
            << Blank line after indented thing, otherwise you get Warnings >>
            Pretty neat eh?
            << Blank line before argument list, otherwise you get Warnings >>
            Args:
                a (int): an input
                b (int): another input
                \*args: more inputs

            Returns:
                (int): an output
        '''

This is called Google docstring format. It will render as follows.

.. py:function:: foo(a, b, *args)

    My cool function

    This function does some stuff with ``a`` and ``b``:
        * one thing
        * another thing

    Pretty neat eh?

    :param int a: an input
    :param int b: another input
    :param \*args: more inputs
    :returns: an output

Note, if you look at the source of this .rst file, the rendered documentation is in python format using lists of ``:param:``. You should use python docstring format if manually documenting in the doc source. In the *code*, use Google format.

Real examples can be found by browsing the API section of this documentation. If you see something you like, click on the link to view the source. Then you can see how the docstring did that.


Via IPython Notebooks
---------------------
The `nbsphinx <nbsphinx.readthedocs.io>`_ package can convert .ipynb files with outputs into html. The idea here is that it is sometimes instructive for the reader to play with some knobs to see how something works. Real code examples are also useful. It also supports interactive running, but that is not recommended.

As of now, documentation notebooks are in docs/sphinx/ipynbs/. There is a symlink to the notebooks/Tests/ directory. Other notebooks can be placed in Others/. These notebooks should be saved with outputs. You can reference them in the documentation like so

.. toctree::
    :maxdepth: 1
    :glob:
    :caption: All IPython notebooks used for Tests

    /ipynbs/Tests/*

.. todo::

    Output images in symlinked notebooks are not displaying

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
